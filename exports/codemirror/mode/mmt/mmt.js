// remove this (?): CodeMirror, copyright (c) by Marijn Haverbeke and others
// remove this (?): Distributed under an MIT license: https://codemirror.net/LICENSE

// DO NOT EDIT - AUTOGENERATED
//
// This mode has been autogenerated from the Pygments lexer [1] by the script [2].
//
// [1]: https://github.com/ComFreek/mmtpygments
// [2]: https://github.com/ComFreek/mmtpygments/blob/master/mmtpygments/pygments_to_codemirror.py

(function(mod) {
	if (typeof exports == "object" && typeof module == "object") // CommonJS
		mod(require("../../lib/codemirror"));
	else if (typeof define == "function" && define.amd) // AMD
		define(["../../lib/codemirror"], mod);
	else // Plain browser env
		mod(CodeMirror);
})(function(CodeMirror) {
	"use strict";

	CodeMirror.defineMIME("application/x-mmt", "mmt");

	CodeMirror.defineAdvancedMode("mmt", {
		"start": [
				{regex: /\s+/uims, token: "whitespace"},
				{regex: /\/T .*?❚/uims, token: "comment"},
				{regex: /\/\/.*?❚/uims, token: "comment"},
				{regex: /(document)((?: |\t)+)(\S+?)(?=\s+)/uims, token: ["keyword", "whitespace", 'Name.Namespace']},
				{regex: /(meta)(\s+)(\S+)(\s+)([^❚]+)(\s*)(❚)/uims, token: ["keyword", "whitespace", "link", "whitespace", 'MMT_ObjectExpression', "whitespace", 'MMT_MD']},
				{regex: /(namespace)(\s+)(\S+?)(\s*)(❚)/uims, token: ["keyword", "whitespace", "link", "whitespace", 'MMT_MD']},
				{regex: /(import)(\s+)(\S+)(\s+)(\S+?)(\s*)(❚)/uims, token: ["keyword", "whitespace", 'Name.Namespace', "whitespace", "link", "whitespace", 'MMT_MD']},
				{regex: /(fixmeta|ref|rule)(\s+)(\S+?)(\s*)(❚)/uims, token: ["comment", "whitespace", "link", "whitespace", 'MMT_MD']},
				{regex: /(diagram)\b/uims, token: "keyword", transition: "diagramHeader"},
				{regex: /(theory)\b/uims, token: "keyword", transition: "theoryHeader"},
				{regex: /(?:(total|implicit)(\s+))?(?:(total|implicit)(\s+))?(view)\b/uims, token: ["keyword", "whitespace", "keyword", "whitespace", "keyword"], transition: "viewHeader"},
				{regex: /[^❚]*?❚/uims, token: 'Generic.Error'},
		],
		"expectMD": [
				{regex: /(\s*)(❚)/uims, token: ["whitespace", 'MMT_MD'], transition: "#pop"},
		],
		"expectDD": [
				{regex: /(\s*)(❙)/uims, token: ["whitespace", 'MMT_DD'], transition: "#pop"},
		],
		"expectOD": [
				{regex: /(\s*)(❘)/uims, token: ["whitespace", 'MMT_OD'], transition: "#pop"},
		],
		"structuralFeatureHeader": [
				{regex: /\s+/uims, token: "whitespace"},
				{regex: /([^\s(❙❚:=]+)(\s*)(?:(\()([^)]*)(\)))?(\s*)(?:(:)(\s*)([^❘❙❚=]+))?(\s*)(?:(=)(\s*)([^\s:❙❚]+))?(\s*)(❙)/uims, token: ["variable", "whitespace", "punctuation", "variable-3", "punctuation", "whitespace", "punctuation", "whitespace", "variable-3", "whitespace", "punctuation", "whitespace", "link", "whitespace", 'MMT_DD'], transition: "#pop"},
				{regex: /([^\s(❙❚:=]+)(\s*)(?:(\()([^)]*)(\)))?(\s*)(?:(:)(\s*)([^❘❙❚=]+))?(\s*)/uims, token: ["variable", "whitespace", "punctuation", "variable-3", "punctuation", "whitespace", "punctuation", "whitespace", "variable-3", "whitespace"], transition: "moduleDefiniens"},
		],
		"theoryHeader": [
				{regex: /\s+/uims, token: "whitespace"},
				{regex: /([^\s❙❚:=]+)(\s*)(?:(:)(\s*)([^\s❙❚=]+))?(\s*)(?:(>)([^❙❚=]+))?/uims, token: ["variable", "whitespace", "punctuation", "whitespace", "link", "whitespace", "punctuation", "variable-3"], transition: "moduleDefiniens"},
		],
		"moduleDefiniens": [
				{regex: /\s+/uims, token: "whitespace"},
				{regex: /❘/uims, token: 'MMT_OD'},
				{regex: /#+/uims, token: "punctuation", transition: "notationExpression"},
				{regex: /=/uims, token: "punctuation", transition: "moduleBody"},
				{regex: /❚/uims, token: 'MMT_MD', transition: "#pop:2"},
		],
		"viewHeader": [
				{regex: /\s+/uims, token: "whitespace"},
				{regex: /(\S+)(\s*)(:)(\s*)(\S+)(\s*)(->|→)(\s*)([^\s❚=]+)/uims, token: ["variable", "whitespace", "punctuation", "whitespace", "link", "whitespace", "punctuation", "whitespace", "link"], transition: "moduleDefiniens"},
		],
		"diagramHeader": [
				{regex: /\s+/uims, token: "whitespace"},
				{regex: /(\S+)(\s*)(:)(\s*)([^❚=]+)/uims, token: ["variable-3", "whitespace", "punctuation", "whitespace", "variable-3"], transition: "expression"},
				{regex: /[^❚=]+/uims, token: "variable-3", transition: "expression"},
				{regex: /❚/uims, token: 'MMT_MD', transition: "#pop"},
		],
		"moduleBody": [
				{regex: /\s+/uims, token: "whitespace"},
				{regex: /\/T .*?(❙|❚)/uims, token: "comment"},
				{regex: /\/\/.*?(❙|❚)/uims, token: "comment"},
				{regex: /(@_description)(\s+)([^❙])+(❙)/uims, token: ["keyword", "whitespace", "string", 'MMT_DD']},
				{regex: /(meta)(\s+)(\S+)(\s+)([^❙❚]+)(\s*)(❙)/uims, token: ["keyword", "whitespace", "link", "whitespace", 'MMT_ObjectExpression', "whitespace", 'MMT_MD']},
				{regex: /(include)(\s+)([^❙]+)(❙)/uims, token: ["keyword", "whitespace", "link", 'MMT_DD']},
				{regex: /(constant)(\s+)([^\s:❘❙]+)/uims, token: ["keyword", "whitespace", "variable-3"], transition: "constantDeclaration"},
				{regex: /(rule)(\s+)([^❙]+)(\s*)(❙)/uims, token: ["keyword", "whitespace", "link", "whitespace", 'MMT_DD']},
				{regex: /(realize)(\s+)([^❙]+)(\s*)(❙)/uims, token: ["keyword", "whitespace", "link", "whitespace", 'MMT_DD']},
				{regex: /(?:(total|implicit)(\s+))?(?:(total|implicit)(\s+))?(structure\b)/uims, token: ["keyword", "whitespace", "keyword", "whitespace", "keyword"], transition: "structuralFeatureHeader"},
				{regex: /theory\b/uims, token: "keyword", transition: "theoryHeader"},
				{regex: /(?:(total|implicit)(\s+))?(?:(total|implicit)(\s+))?(view\b)/uims, token: ["keyword", "whitespace", "keyword", "whitespace", "keyword"], transition: "viewHeader"},
				{regex: /(#+)([^❙]+)(❙)/uims, token: ["string", "string", 'MMT_DD']},
				{regex: /([^\s:=#❘❙❚]+)(\s+)(?=[^\s:=@#❘❙❚]+)/uims, token: ["keyword", "whitespace"], transition: "structuralFeatureHeader"},
				{regex: /[^\s:=#❘❙❚]+/uims, token: "variable-3", transition: "constantDeclaration"},
				{regex: /[^❚]*?❙/uims, token: 'Generic.Error'},
				{regex: /❚/uims, token: 'MMT_MD', transition: "#pop:3"},
		],
		"constantDeclaration": [
				{regex: /\s+/uims, token: "whitespace"},
				{regex: /:/uims, token: "punctuation", transition: "expression"},
				{regex: /=/uims, token: "punctuation", transition: "expression"},
				{regex: /#+/uims, token: "punctuation", transition: "notationExpression"},
				{regex: /(@_description)(\s+)([^❘❙])+/uims, token: ["keyword", "whitespace", "string"]},
				{regex: /(@)([^❘❙]+)/uims, token: ["punctuation", "variable-2"]},
				{regex: /role\b/uims, token: "keyword", transition: "expression"},
				{regex: /(meta)(\s+)(\S+)(\s+)([^❘❙]+)(\s*)(?=❘|❙)/uims, token: ["keyword", "whitespace", "link", "whitespace", 'MMT_ObjectExpression', "whitespace"]},
				{regex: /\/\/[^❘❙]*/uims, token: "comment"},
				{regex: /❘/uims, token: 'MMT_OD'},
				{regex: /❙/uims, token: 'MMT_DD', transition: "#pop"},
				{regex: /[^❙❚]*?=[^❚]*?❚/uims, token: 'Generic.Error', transition: "#pop"},
				{regex: /[^❚]*?❙/uims, token: 'Generic.Error', transition: "#pop"},
		],
		"notationExpression": [
				{regex: /\s+/uims, token: "whitespace"},
				{regex: /\d+/uims, token: "string"},
				{regex: /%?((I|V|L)\d+[Td]*)(_(I|L)\d+[Td]*)*/uims, token: "string"},
				{regex: /…/uims, token: "string"},
				{regex: /(\bprec)(\s+)(-?\d+)/uims, token: ["keyword", "whitespace", "number"], transition: "#pop"},
				{regex: /([^\s\d…❘❙❚]+)/uims, token: "string"},
				{regex: /(?=[❘❙❚])/uims, token: "whitespace", transition: "#pop"},
		],
		"expression": [
				{regex: /\s+/uims, token: "whitespace"},
				{regex: /[^❘❙❚]*/uims, token: 'MMT_ObjectExpression', transition: "#pop"},
		],
	});
});