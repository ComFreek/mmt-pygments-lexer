# -*- coding: utf-8 -*- #
# frozen_string_literal: true

# DO NOT EDIT - AUTOGENERATED
#
# This Rouge lexer file has been autogenerated by convert_pygments_regex_lexer
# from Python's regex lexer <class '__main__.MMTLexer'>

module Rouge
	module Lexers
		class MMT < RegexLexer
			title 'mmt'
			desc <<-DESC

	Pygments Lexer for MMT Surface Syntax

	The MMT project can be found at https://uniformal.github.io/.

	:author: ComFreek <comfreek@outlook.com>
	:copyright: Copyright 2020 ComFreek
	:license: ISC, see LICENSE for details.
	
DESC
			tag 'mmt'
			mimetypes 'text/plain'
			filenames '*.mmt'
			state :root do
				rule %r/\s/im do
					token Text::Whitespace
				end
				rule %r/\/T .*?❚/im do
					token Comment::Multiline
				end
				rule %r/\/\/.*?❚/im do
					token Comment::Multiline
				end
				rule %r/(document)(\s+)(\S+?)(?=\s+)/im do
					groups Keyword::Declaration,Text::Whitespace,Name::Namespace
				end
				rule %r/(meta)(?= )/im do
					token Keyword::Declaration
					push :expectMD
					push :metaAnnotation
				end
				rule %r/(namespace)(\s+)(\S+?)(\s*)(❚)/im do
					groups Keyword::Namespace,Text::Whitespace,Text,Text::Whitespace,Text
				end
				rule %r/(import)(\s+)(\S+)(\s+)(\S+?)(\s*)(❚)/im do
					groups Keyword::Namespace,Text::Whitespace,Name::Namespace,Text::Whitespace,Text,Text::Whitespace,Text
				end
				rule %r/(fixmeta|ref|rule)(\s+)(\S+?)(\s*)(❚)/im do
					groups Comment::Preproc,Text::Whitespace,Text,Text::Whitespace,Text
				end
				rule %r/diagram\b/im do
					token Keyword::Declaration
					push :diagramHeader
				end
				rule %r/(theory)\b/im do
					token Keyword::Declaration
					push :theoryHeader
				end
				rule %r/(implicit)(\s+)(view)\b/im do
					groups Keyword::Declaration,Text::Whitespace,Keyword::Declaration
					push :viewHeader
				end
				rule %r/(view)\b/im do
					token Keyword::Declaration
					push :viewHeader
				end
				rule %r/[^❚]*?❚/im do
					token Generic::Error
				end
			end
			state :expectMD do
				rule %r/(\s*)(❚)/im do
					groups Text::Whitespace,Text
					pop!(1)
				end
			end
			state :expectDD do
				rule %r/(\s*)(❙)/im do
					groups Text::Whitespace,Text
					pop!(1)
				end
			end
			state :expectOD do
				rule %r/(\s*)(❘)/im do
					groups Text::Whitespace,Text
					pop!(1)
				end
			end
			state :metaAnnotation do
				rule %r/(\s*)(.*?)(\s+)/im do
					groups Text::Whitespace,Name::Constant,Text::Whitespace
					push :metaAnnotationValue
				end
			end
			state :metaAnnotationValue do
				rule %r/\?[^ ❘❙❚]*/im do
					token Text
					pop!(2)
				end
				rule %r/[^❘❙❚]*/im do
					token Text
					pop!(2)
				end
			end
			state :theoryHeader do
				rule %r/\s/im do
					token Text::Whitespace
				end
				rule %r/([^\s❙❚=]+)(\s*)(?:(:)(\s*)([^❙❚=]+))?(\s*)(?:(>)([^❙❚=]+))?/im do
					groups Name::Class,Text::Whitespace,Punctuation,Text::Whitespace,Name::Variable,Text::Whitespace,Punctuation,Name::Variable
					push :moduleDefiniens
				end
			end
			state :moduleDefiniens do
				rule %r/\s/im do
					token Text::Whitespace
				end
				rule %r/❘/im do
					token Text
				end
				rule %r/#/im do
					token Punctuation
					push :notationExpression
				end
				rule %r/=/im do
					token Punctuation
					push :moduleBody
				end
				rule %r/[❙❚]/im do
					token Text
					pop!(2)
				end
			end
			state :viewHeader do
				rule %r/\s/im do
					token Text::Whitespace
				end
				rule %r/(\S+)(\s*)(:)(\s*)(\S+)(\s*)(->|→)(\s*)([^❚=]+)/im do
					groups Name::Class,Text::Whitespace,Punctuation,Text::Whitespace,Name::Variable,Text::Whitespace,Punctuation,Text::Whitespace,Name::Variable
					push :moduleDefiniens
				end
			end
			state :structuralFeatureHeader do
				rule %r/\s/im do
					token Text::Whitespace
				end
				rule %r/(\S+)(\s*)(\()([^)]*)(\))(\s*)(:)?/im do
					groups Name::Class,Text::Whitespace,Punctuation,Text,Punctuation,Text::Whitespace,Punctuation
					push :moduleDefiniens
					push :expression
				end
			end
			state :diagramHeader do
				rule %r/\s/im do
					token Text::Whitespace
				end
				rule %r/(\S+)(\s*)(:)(\s*)([^❚=]+)/im do
					groups Name::Variable,Text::Whitespace,Punctuation,Text::Whitespace,Name::Variable
					push :expression
				end
				rule %r/[^❚=]+/im do
					token Name::Variable
					push :expression
				end
				rule %r/❚/im do
					token Text
					pop!(1)
				end
			end
			state :moduleBody do
				rule %r/\s/im do
					token Text::Whitespace
				end
				rule %r/\/T .*?(❙|❚)/im do
					token Comment::Multiline
				end
				rule %r/\/\/.*?(❙|❚)/im do
					token Comment::Multiline
				end
				rule %r/(@_description)(\s+)([^❙])+(❙)/im do
					groups Keyword,Text::Whitespace,Literal::String,Text
				end
				rule %r/(meta)(?= )/im do
					token Keyword::Declaration
					push :expectDD
					push :metaAnnotation
				end
				rule %r/(include)(\s+)([^❙]+)(❙)/im do
					groups Keyword::Namespace,Text::Whitespace,Text,Text
				end
				rule %r/(constant)(\s+)([^\s:❘❙]+)/im do
					groups Keyword::Declaration,Text::Whitespace,Name::Variable::Class
					push :constantDeclaration
				end
				rule %r/(rule)(\s+)([^❙]+)(\s*)(❙)/im do
					groups Keyword::Namespace,Text::Whitespace,Text,Text::Whitespace,Text
				end
				rule %r/(realize)(\s+)([^❙]+)(\s*)(❙)/im do
					groups Keyword,Text::Whitespace,Text,Text::Whitespace,Text
				end
				rule %r/(total\s+)?(structure\b)/im do
					token Keyword
					push :theoryHeader
				end
				rule %r/theory\b/im do
					token Keyword::Declaration
					push :theoryHeader
				end
				rule %r/(#+)([^❙]+)(❙)/im do
					groups Literal::String::Doc,Literal::String::Doc,Text
				end
				rule %r/([^\s:=#❘❙❚]+)(\s+)(?=[^\s:=#❘❙❚]+\()/im do
					groups Keyword::Declaration,Text::Whitespace
					push :structuralFeatureHeader
				end
				rule %r/[^\s:=#❘❙❚]+/im do
					token Name::Variable::Class
					push :constantDeclaration
				end
				rule %r/[^❚]*?❙/im do
					token Generic::Error
				end
				rule %r/❚/im do
					token Text
					pop!(3)
				end
			end
			state :constantDeclaration do
				rule %r/\s/im do
					token Text::Whitespace
				end
				rule %r/:/im do
					token Punctuation
					push :expression
				end
				rule %r/=/im do
					token Punctuation
					push :expression
				end
				rule %r/#/im do
					token Punctuation
					push :notationExpression
				end
				rule %r/(@_description)(\s+)([^❘❙])+/im do
					groups Keyword,Text::Whitespace,Literal::String
				end
				rule %r/(@)([^❘❙]+)/im do
					groups Punctuation,Name::Constant
				end
				rule %r/role\b/im do
					token Keyword
					push :expression
				end
				rule %r/(meta)(?= )/im do
					token Keyword::Declaration
					push :metaAnnotation
				end
				rule %r/\/\/[^❘❙]*/im do
					token Comment::Multiline
				end
				rule %r/❘/im do
					token Text
				end
				rule %r/❙/im do
					token Text
					pop!(1)
				end
				rule %r/[^❙❚]*?=[^❚]*?❚/im do
					token Generic::Error
					pop!(1)
				end
				rule %r/[^❚]*?❙/im do
					token Generic::Error
					pop!(1)
				end
			end
			state :notationExpression do
				rule %r/\s+/im do
					token Text::Whitespace
				end
				rule %r/\d+/im do
					token Literal::String::Interpol
				end
				rule %r/%?((I|V|L)\d+[Td]*)(_(I|L)\d+[Td]*)*/im do
					token Literal::String::Interpol
				end
				rule %r/…/im do
					token Literal::String::Interpol
				end
				rule %r/(\bprec)(\s+)(-?\d+)/im do
					groups Keyword,Text::Whitespace,Literal::Number::Integer
					pop!(1)
				end
				rule %r/([^\s\d…❘❙❚]+)/im do
					token Literal::String::Symbol
				end
				rule %r/(?=[❘❙❚])/im do
					token Text::Whitespace
					pop!(1)
				end
			end
			state :expression do
				rule %r/\s/im do
					token Text::Whitespace
				end
				rule %r/[^❘❙❚]*/im do
					token Text
					pop!(1)
				end
			end
		end
	end
end
